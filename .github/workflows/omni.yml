jobs:
  matrix_prep:
    env:
      MATRIX_DEFAULT_TEST_GROUP: ${{ github.event.inputs.matrix_default_test_group
        }}
      MATRIX_GENERATION_NODE_JS_SCRIPT: "let fs = require('fs');\nlet os = require('os');\n\
        const DEFAULT_TEST_GROUP = process.env.MATRIX_DEFAULT_TEST_GROUP || 'fast';\n\
        \nconst JDK_OPTIONS = [\n    { group: 'Zulu', version: '8', lts: true, distribution:\
        \ 'zulu' },\n    { group: 'Zulu', version: '11', lts: true, distribution:\
        \ 'zulu' },\n    { group: 'Zulu', version: '15', lts: false, distribution:\
        \ 'zulu' },\n];\n\nconst OTHER_JDK_OPTIONS = [\n  // Adopt\n  { group: 'Adopt\
        \ Hotspot', version: '8', lts: true, distribution: 'adopt-hotspot' },\n  {\
        \ group: 'Adopt Hotspot', version: '11', lts: true, distribution: 'adopt-hotspot'\
        \ },\n\n  // Adopt OpenJ9\n  // TODO: Replace these hard coded versions with\
        \ something that dynamically picks the most recent\n  { group: 'Adopt OpenJ9',\
        \ version: '8', lts: true, distribution: 'adopt-openj9'},\n  { group: 'Adopt\
        \ OpenJ9', version: '11', lts: true, distribution: 'adopt-openj9'},\n\n  //\
        \ Amazon Corretto\n  { group: 'Corretto', version: '8', lts: true, distribution:\
        \ 'jdkfile', url: 'https://corretto.aws/downloads/latest/amazon-corretto-8-x64-linux-jdk.tar.gz'},\n\
        \  { group: 'Corretto', version: '11', lts: true, distribution: 'jdkfile',\
        \ url: 'https://corretto.aws/downloads/latest/amazon-corretto-11-x64-linux-jdk.tar.gz'},\n\
        ];\n\nconst PG_VERSIONS = [\n    '8.4',\n    '9.0',\n    '9.1',\n    '9.2',\n\
        \    '9.3',\n    '9.4',\n    '9.5',\n    '9.6',\n    '10',\n    '11',\n  \
        \  '12',\n    '13',\n    // TODO: Determine the latest and greatest server\
        \ version automatically so we don't need to periodically update this\n];\n\
        \n\nconst LTS_JDK_OPTIONS = JDK_OPTIONS.filter(jdk => jdk.lts);\nconst UNSTABLE_JDK_OPTIONS\
        \ = JDK_OPTIONS.filter(jdk => !jdk.lts);\nconst LATEST_JDK = LTS_JDK_OPTIONS.slice(-1)[0];\n\
        const LATEST_PG_VERSION = PG_VERSIONS.slice(-1)[0];\n\nconst list = [];\n\n\
        const matchesMatrixFilter = (name, value) => {\n    const env_value = process.env['MATRIX_'\
        \ + name];\n    if (!env_value || env_value === '*') {\n      return true;\n\
        \    }\n    // TODO: Consider expanding this to do globbing\n    return env_value\
        \ === ('' + value);\n};\n\nconst addItem = (opts) => {\n    const name = opts.name\
        \ ?? '';\n    const os = 'ubuntu-latest';\n    const pg_version = opts.pg_version\
        \ ?? LATEST_PG_VERSION;\n    const jdk = opts.jdk ?? LATEST_JDK;\n    const\
        \ experimental = opts.experimental ?? false;\n    const test_group = opts.test_group\
        \ ?? DEFAULT_TEST_GROUP;\n    const create_replicas = opts.create_replicas\
        \ ?? false;\n\n    const isAtLeast = (minVersion) => Number(pg_version) >=\
        \ Number(minVersion);\n    const scramSupported = isAtLeast('10');\n    const\
        \ sslSupported = isAtLeast('9.3');\n\n    const query_mode = opts.query_mode;\n\
        \    const ssl = opts.ssl ?? sslSupported;\n    const scram = opts.scram ??\
        \ scramSupported;\n\n    if (!matchesMatrixFilter('JDK_DISTRIBUTION', jdk.distribution)\
        \ ||\n        !matchesMatrixFilter('JDK_VERSION', jdk.version) ||\n      \
        \  !matchesMatrixFilter('PG_VERSION', pg_version) ||\n        !matchesMatrixFilter('QUERY_MODE',\
        \ query_mode ?? '') ||\n        !matchesMatrixFilter('SCRAM', scram) ||\n\
        \        !matchesMatrixFilter('SSL', ssl)) {\n      return;\n    }\n\n   \
        \ const junit_include_tags = (() => {\n      switch (test_group) {\n     \
        \   case 'replication':\n          // Only replication tests\n          return\
        \ 'replication';\n        case 'fast':\n          // Fast group does not run\
        \ slow or replication tests\n          return '!org.postgresql.test.SlowTests\
        \ & !replication';\n        case 'slow':\n          // Everything but replication\
        \ tests (which includes all the really slow ones)\n          return '!replication';\n\
        \        case 'all':\n          // Everything\n          return ''\n     \
        \ }\n      throw new Error('Invalid test group: ' + test_group);\n    })();\n\
        \n    list.push({\n        name: [\n          experimental ? 'Experimental'\
        \ : '',\n          name,\n          `${jdk.group} ${jdk.version} x PG ${pg_version}`\n\
        \          ].filter(x => x).join(' - '),\n        os,\n        jdk_group:\
        \ jdk.group,\n        jdk_version: jdk.version,\n        jdk_distribution:\
        \ jdk.distribution,\n        jdk_url: jdk.url,\n        pg_version,\n    \
        \    ssl,\n        scram,\n        server_tz: opts.server_tz ?? 'Etc/UTC',\n\
        \        experimental,\n        junit_include_tags,\n        query_mode,\n\
        \    });\n};\n\n// Latest JDK x each stable PG version\nfor (const pg_version\
        \ of PG_VERSIONS) {\n    addItem({\n        pg_version,\n    });\n}\n\n//\
        \ Latest PG version x each remaining JDK\nfor (const jdk of JDK_OPTIONS) {\n\
        \    if (jdk == LATEST_JDK) {\n        continue; // Skip duplicate\n    }\n\
        \    addItem({\n        jdk,\n        pg_version: LATEST_PG_VERSION,\n   \
        \     experimental: !jdk.lts,\n    });\n}\n\n// No SSL / No SCRAM (only on\
        \ latest PG / JDK)\naddItem({\n    name: `No SSL / No SCRAM`,\n    ssl: false,\n\
        \    scram: false,\n});\n\n// Custom server timezones (only on latest PG /\
        \ JDK)\naddItem({\n    name: `Server TZ - America/New_York`,\n    server_tz:\
        \ 'America/New_York'\n});\naddItem({\n    name: `Server TZ - Pacific/Chatham`,\n\
        \    server_tz: 'Pacific/Chatham'\n});\n\n// Custom query modes (only on latest\
        \ PG / JDK)\naddItem({\n    name: `Query Mode - simple`,\n    query_mode:\
        \ 'simple',\n});\naddItem({\n    name: `Query Mode - extendedForPrepared`,\n\
        \    query_mode: 'extendedForPrepared',\n});\naddItem({\n    name: `Query\
        \ Mode - extendedCacheEverything`,\n    query_mode: 'extendedCacheEverything',\n\
        });\n\n// Slow tests (only on latest PG / JDK)\naddItem({\n    name: `Slow\
        \ Tests`,\n    test_group: 'slow',\n    create_replicas: true,\n});\n// Replication\
        \ tests (only on latest PG / JDK)\naddItem({\n    name: `Replication Tests`,\n\
        \    test_group: 'replication',\n});\n\n// TODO: Add latest PG built from\
        \ source marked as experimental\n\nfor(const jdk of OTHER_JDK_OPTIONS) {\n\
        \    addItem({\n        jdk,\n        pg_version: LATEST_PG_VERSION,\n   \
        \     experimental: !jdk.lts,\n    });\n}\n\nif (list.length === 0) {\n  throw\
        \ new Error('Matrix list is empty. Check you matrix filters to ensure they\
        \ match a valid combination.');\n}\n\nconst toKey = (item) => JSON.stringify(Object.entries(item).filter(([field])\
        \ => field != 'name').sort())\nconst include = list.filter((item, i) => {\n\
        \  const key = toKey(item);\n  // Deduplicate by picking only the first entry\
        \ matching this key\n  return i === list.findIndex((other) => key === toKey(other));\n\
        });\n// Sort so that all the experimental jobs appear at the end of the list\n\
        include.sort((a, b) => (a.experimental ? 1 : 0) - (b.experimental ? 1 : 0))\n\
        \nlet filePath = process.env['GITHUB_OUTPUT'] || '';\nif (filePath) {\n  \
        \  fs.appendFileSync(filePath, `matrix<<MATRIX_BODY${os.EOL}${JSON.stringify({include})}${os.EOL}MATRIX_BODY${os.EOL}`,\
        \ {\n        encoding: 'utf8'\n    });\n}\n"
      MATRIX_JDK_DISTRIBUTION: ${{ github.event.inputs.matrix_jdk_distribution }}
      MATRIX_JDK_VERSION: ${{ github.event.inputs.matrix_jdk_version }}
      MATRIX_PG_VERSION: ${{ github.event.inputs.matrix_pg_version }}
      MATRIX_QUERY_MODE: ${{ github.event.inputs.matrix_query_mode }}
      MATRIX_SCRAM: ${{ github.event.inputs.matrix_scram }}
      MATRIX_SSL: ${{ github.event.inputs.matrix_ssl }}
    name: Matrix Preparation
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      id: set-matrix
      run: 'node -e "${MATRIX_GENERATION_NODE_JS_SCRIPT}"

        '
  test:
    continue-on-error: ${{ matrix.experimental }}
    env:
      ACTIONS_RUNNER_DEBUG: true
      ACTIONS_STEP_DEBUG: true
      CREATE_REPLICAS: ${{ matrix.create_replicas }}
      SCRAM: ${{ matrix.scram }}
      SSL: ${{ matrix.ssl }}
      TZ: ${{ matrix.server_tz }}
    name: ${{ matrix.name }}
    needs: matrix_prep
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      env:
        MATRIX_JSON: ${{ toJSON(matrix) }}
      name: Show Matrix
      run: echo "${MATRIX_JSON}"
    - continue-on-error: true
      uses: actions/checkout@v3
      with:
        fetch-depth: 50
    - continue-on-error: true
      env:
        PGV: ${{ matrix.pg_version }}
      name: Start PostgreSQL
      run: docker-compose up -d && docker-compose logs
      working-directory: docker/postgres-server
    - continue-on-error: true
      if: ${{ matrix.jdk_distribution != 'jdkfile' }}
      name: Set up JDK ${{ matrix.jdk_version }} / ${{ matrix.jdk_distribution }}
      uses: actions/setup-java@v3
      with:
        architecture: x64
        distribution: ${{ matrix.jdk_distribution }}
        java-version: ${{ matrix.jdk_version }}
    - continue-on-error: true
      if: ${{ matrix.jdk_distribution == 'jdkfile' }}
      name: Download JDK ${{ matrix.jdk_distribution }} / ${{ matrix.jdk_version }}
        from ${{ matrix.jdk_url }}
      run: 'jdk_url="${{ matrix.jdk_url }}"

        wget -nv -O "${{ runner.temp }}/java_package.tar.gz" "${jdk_url}"

        '
    - continue-on-error: true
      if: ${{ matrix.jdk_distribution == 'jdkfile' }}
      name: Set up JDK ${{ matrix.jdk_version }} / ${{ matrix.jdk_url }}
      uses: actions/setup-java@v3
      with:
        architecture: x64
        distribution: ${{ matrix.jdk_distribution }}
        java-version: ${{ matrix.jdk_version }}
        jdkFile: ${{ runner.temp }}/java_package.tar.gz
    - continue-on-error: true
      name: Java version
      run: 'java -version

        '
    - continue-on-error: true
      env:
        PGDATABASE: postgres
        PGHOST: localhost
        PGUSER: postgres
      name: PostgreSQL version
      run: "if ! docker/bin/wait_for_pg_isready; then\n    # Server is not online\
        \ so dump some logs for debugging\n    docker ps\n    cd docker/postgres-server\n\
        \    docker-compose logs\nfi\npsql -c 'SELECT version()'\n"
    - continue-on-error: true
      name: Prepare local properties
      run: 'cat <<EOF >ssltest.local.properties

        enable_ssl_tests=${{ matrix.ssl }}

        EOF

        cat <<EOF >build.local.properties

        preferQueryMode=${{ matrix.query_mode}}

        EOF

        '
    - continue-on-error: true
      env:
        S3_BUILD_CACHE_ACCESS_KEY_ID: ${{ secrets.S3_BUILD_CACHE_ACCESS_KEY_ID }}
        S3_BUILD_CACHE_SECRET_KEY: ${{ secrets.S3_BUILD_CACHE_SECRET_KEY }}
      name: Test
      uses: burrunan/gradle-cache-action@v1
      with:
        arguments: --no-parallel --no-daemon --scan jandex test jacocoReport
        job-id: jdk${{ matrix.jdk_version}}_${{ matrix.jdk_group }}
        properties: 'includeTestTags=${{ matrix.junit_include_tags }}

          '
    - continue-on-error: true
      name: Upload code coverage
      uses: codecov/codecov-action@b8a1d6a4243f1ff280a5533872c4d80179cc5b4a
      with:
        file: ./build/reports/jacoco/jacocoReport/jacocoReport.xml
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}
  test-pg-head:
    continue-on-error: true
    name: Zulu 11 x PG HEAD
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v3
      with:
        fetch-depth: 50
    - continue-on-error: true
      name: Compile and start PostgreSQL
      run: docker-compose up -d && docker-compose logs
      working-directory: docker/postgres-head
    - continue-on-error: true
      name: Set up JDK
      uses: actions/setup-java@v3
      with:
        architecture: x64
        distribution: zulu
        java-version: 17
    - continue-on-error: true
      name: Java version
      run: 'java -version

        '
    - continue-on-error: true
      env:
        PGDATABASE: postgres
        PGHOST: localhost
        PGUSER: postgres
      name: PostgreSQL version
      run: "if ! docker/bin/wait_for_pg_isready; then\n    # Server is not online\
        \ so dump some logs for debugging\n    docker ps\n    cd docker/postgres-head\n\
        \    docker-compose logs\nfi\npsql -c 'SELECT version()'\n"
    - continue-on-error: true
      name: Prepare local properties
      run: 'cat <<EOF >ssltest.local.properties

        enable_ssl_tests=false

        EOF

        cat <<EOF >build.local.properties

        EOF

        '
    - continue-on-error: true
      name: Test
      uses: burrunan/gradle-cache-action@v1
      with:
        arguments: --no-parallel --no-daemon --scan jandex test jacocoReport -PskipJavadoc
        properties: 'includeTestTags=!org.postgresql.test.SlowTests & !replication

          '
    - continue-on-error: true
      name: Upload code coverage
      uses: codecov/codecov-action@b8a1d6a4243f1ff280a5533872c4d80179cc5b4a
      with:
        file: ./build/reports/jacoco/jacocoReport/jacocoReport.xml
name: Omni CI
on:
  repository_dispatch:
    types: trigger-ga___omni.yml
permissions:
  contents: read
