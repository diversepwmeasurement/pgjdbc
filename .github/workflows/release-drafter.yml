jobs:
  update_release_draft:
    env:
      PUBLISH_SNAPSHOT: true
    if: github.repository_owner == 'pgjdbc'
    name: Update Release Draft
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      id: prepare_release
      name: Update release body draft
      uses: release-drafter/release-drafter@v6
      with:
        disable-autolabeler: true
    - continue-on-error: true
      if: ${{ env.PUBLISH_SNAPSHOT == 'true' }}
      name: Checkout sources
      uses: actions/checkout@v3
    - continue-on-error: true
      if: ${{ env.PUBLISH_SNAPSHOT == 'true' }}
      name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: liberica
        java-version: 17
    - continue-on-error: true
      if: ${{ env.PUBLISH_SNAPSHOT == 'true' }}
      name: Build
      uses: burrunan/gradle-cache-action@v1
      with:
        arguments: --scan --no-parallel --no-daemon :postgresql:osgiJar
        job-id: jdk17
    - continue-on-error: true
      env:
        RELEASE_ID: ${{ steps.prepare_release.outputs.id }}
      if: ${{ env.PUBLISH_SNAPSHOT == 'true' }}
      name: Attach files to release
      uses: actions/github-script@v7
      with:
        script: "const fs = require('fs');\nconst {RELEASE_ID} = process.env;\n//\
          \ remove old jar files from the release\nconst assets = await github.rest.repos.listReleaseAssets({\n\
          \    owner: context.repo.owner,\n    repo: context.repo.repo,\n    release_id:\
          \ RELEASE_ID\n});\nfor (const asset of assets.data) {\n    if (asset.name.endsWith('.jar'))\
          \ {\n        await github.rest.repos.deleteReleaseAsset({\n            owner:\
          \ context.repo.owner,\n            repo: context.repo.repo,\n          \
          \  asset_id: asset.id\n        });\n    }\n}\nconst globber = await glob.create('pgjdbc/build/libs/postgresql-*-osgi.jar');\n\
          const files = await globber.glob();\nawait github.rest.repos.uploadReleaseAsset({\n\
          \    owner: context.repo.owner,\n    repo: context.repo.repo,\n    name:\
          \ files[0].replace(/^(.*build\\/libs\\/postgresql-)/, \"postgresql-\").replace(\"\
          -osgi\", \"\"),\n    release_id: RELEASE_ID,\n    data: fs.readFileSync(files[0])\n\
          })\n"
name: Release Drafter
on:
  repository_dispatch:
    types: trigger-ga___release-drafter.yml
