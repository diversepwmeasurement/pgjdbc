concurrency:
  cancel-in-progress: true
  group: ${{ (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/release'
    ) && format('ci-main-{0}', github.sha) || format('ci-main-{0}', github.ref) }}
jobs:
  build-test:
    env:
      ACTIONS_RUNNER_DEBUG: true
      ACTIONS_STEP_DEBUG: true
      TZ: ${{ matrix.tz }}
    name: ${{ matrix.name }}
    needs: matrix_prep
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v3
      with:
        fetch-depth: 50
    - continue-on-error: true
      env:
        CREATE_REPLICAS: ${{ matrix.replication }}
        PGV: ${{ matrix.pg_version }}
        SCRAM: ${{ matrix.scram }}
        SSL: ${{ matrix.ssl }}
        TZ: ${{ matrix.server_tz }}
        XA: ${{ matrix.xa }}
      name: Start PostgreSQL PGV=${{ matrix.pg_version }} TZ=${{ matrix.server_tz
        }} XA=${{ matrix.xa }} SSL=${{ matrix.ssl }} SCRAM=${{ matrix.scram }} CREATE_REPLICAS=${{
        matrix.replication }}
      run: 'echo ''Starting PostgreSQL via docker-compose down; PGV=${{ matrix.pg_version
        }} TZ=${{ matrix.server_tz }} XA=${{ matrix.xa }} SSL=${{ matrix.ssl }} SCRAM=${{
        matrix.scram }} CREATE_REPLICAS=${{ matrix.replication }} docker-compose up''


        docker-compose down -v --rmi local || true

        sed -i -r ''/- (543[3-4]):\1/d'' docker-compose.yml

        docker-compose up -d

        docker-compose logs

        '
      working-directory: docker/postgres-server
    - continue-on-error: true
      name: Set up Java 17 and ${{ matrix.non_ea_java_version }}, ${{ matrix.java_distribution
        }}, ${{ runner.arch }}
      uses: actions/setup-java@v3
      with:
        architecture: ${{ runner.arch == 'ARM64' && 'aarch64' || 'x64' }}
        distribution: ${{ matrix.java_distribution }}
        java-version: '${{ matrix.non_ea_java_version }}

          17

          '
    - continue-on-error: true
      env:
        JAVA_HOME_17_X64: ${{ env.JAVA_HOME_17_AARCH64 || env.JAVA_HOME_17_X64 }}
      id: setup_ea_java
      if: ${{ matrix.oracle_java_website != '' }}
      name: Set up Java ${{ matrix.java_version }}, oracle
      uses: oracle-actions/setup-java@8294b2d42db153962a75462461be076c5298a7c1
      with:
        release: ${{ matrix.java_version }}
        website: ${{ matrix.oracle_java_website }}
    - continue-on-error: true
      if: ${{ matrix.oracle_java_website != '' }}
      name: Set up Java 17 ${{ matrix.java_distribution }} as default
      uses: actions/setup-java@v3
      with:
        architecture: ${{ runner.arch == 'ARM64' && 'aarch64' || 'x64' }}
        distribution: ${{ matrix.java_distribution }}
        java-version: 17
    - continue-on-error: true
      name: Prepare local properties
      run: '# See https://github.com/actions/runner/issues/409

        cat <<EOF >ssltest.local.properties

        enable_ssl_tests=${{ matrix.ssl == ''yes'' && ''true'' || ''false'' }}

        EOF

        cat <<EOF >build.local.properties

        preferQueryMode=${{ matrix.query_mode }}

        EOF

        '
    - continue-on-error: true
      env:
        S3_BUILD_CACHE_ACCESS_KEY_ID: ${{ secrets.S3_BUILD_CACHE_ACCESS_KEY_ID }}
        S3_BUILD_CACHE_SECRET_KEY: ${{ secrets.S3_BUILD_CACHE_SECRET_KEY }}
        _JAVA_OPTIONS: ${{ matrix.extraJvmArgs }}
      name: Test
      uses: burrunan/gradle-cache-action@v1
      with:
        arguments: --scan --no-parallel --no-daemon jandex test ${{ matrix.extraGradleArgs
          }}
        job-id: jdk${{ matrix.java_version }}
        properties: 'includeTestTags=${{ matrix.includeTestTags }}

          testExtraJvmArgs=${{ matrix.testExtraJvmArgs }}

          jdkBuildVersion=17

          jdkTestVersion=${{ matrix.java_version == ''EA'' && steps.setup_ea_java.outputs.version
          || matrix.java_version }}

          jdkTestVendor=${{ matrix.java_vendor }}

          # We provision JDKs with GitHub Actions for caching purposes, so Gradle
          should rather fail in case JDK is not found

          org.gradle.java.installations.auto-download=false

          '
        read-only: ${{ matrix.os == 'self-hosted' }}
    - continue-on-error: true
      if: ${{ matrix.gss == 'yes' }}
      name: Install krb5 for GSS tests
      run: 'sudo apt -y update

        sudo apt -y install krb5-kdc krb5-admin-server libkrb5-dev postgresql

        '
    - continue-on-error: true
      if: ${{ matrix.gss == 'yes' }}
      name: Update hosts for GSS tests
      run: 'sudo -- sh -c "echo 127.0.0.1 localhost auth-test-localhost.postgresql.example.com
        > /etc/hosts"

        cat /etc/hosts

        '
    - continue-on-error: true
      if: ${{ matrix.deploy_to_maven_local }}
      name: Deploy pgjdbc to mavenLocal
      uses: burrunan/gradle-cache-action@v1
      with:
        arguments: publishToMavenLocal -Ppgjdbc.version=1.0.0-dev-master -PskipJavadoc
        job-id: jdk${{ matrix.java_version }}
        read-only: ${{ matrix.os == 'self-hosted' }}
    - continue-on-error: true
      if: ${{ failure() && github.event_name == 'pull_request' }}
      name: Attach heap dump if any
      uses: actions/upload-artifact@v4
      with:
        name: pgjdbc-heapdump
        path: pgjdbc/*.hprof
    - continue-on-error: true
      env:
        KRB5CCNAME: /home/runner/work/pgjdbc/pgjdbc/test-gss/tmp_check/krb5cc
        KRB5_CONFIG: /home/runner/work/pgjdbc/pgjdbc/test-gss/tmp_check/krb5.conf
        KRB5_KDC_PROFILE: /home/runner/work/pgjdbc/pgjdbc/test-gss/tmp_check/kdc.conf
      if: ${{ matrix.gss == 'yes' }}
      name: Test GSS
      run: 'cd test-gss

        ./gradlew assemble

        ./gradlew run

        '
    - continue-on-error: true
      if: ${{ matrix.check_anorm_sbt == 'yes' }}
      name: Test anorm-sbt
      run: '# mkdir -p $HOME/.sbt/launchers/0.13.12

        # curl -L -o $HOME/.sbt/launchers/0.13.12/sbt-launch.jar http://dl.bintray.com/typesafe/ivy-releases/org.scala-sbt/sbt-launch/0.13.12/sbt-launch.jar


        cd test-anorm-sbt

        sbt test

        '
    - continue-on-error: true
      if: ${{ always() }}
      name: Cleanup Docker
      run: 'docker-compose ps

        docker-compose down -v --rmi local

        '
      working-directory: docker/postgres-server
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}
  code-style:
    env:
      ACTIONS_RUNNER_DEBUG: true
      ACTIONS_STEP_DEBUG: true
    name: Code style
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v3
      with:
        fetch-depth: 50
    - continue-on-error: true
      name: Set up JDK 8
      uses: actions/setup-java@v3
      with:
        distribution: zulu
        java-version: 17
    - continue-on-error: true
      env:
        S3_BUILD_CACHE_ACCESS_KEY_ID: ${{ secrets.S3_BUILD_CACHE_ACCESS_KEY_ID }}
        S3_BUILD_CACHE_SECRET_KEY: ${{ secrets.S3_BUILD_CACHE_SECRET_KEY }}
      name: Verify code style
      uses: burrunan/gradle-cache-action@v1
      with:
        arguments: styleCheck jandex
        job-id: jdk17
  linux-checkerframework:
    name: CheckerFramework
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v3
      with:
        fetch-depth: 50
    - continue-on-error: true
      name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: zulu
        java-version: 17
    - continue-on-error: true
      env:
        S3_BUILD_CACHE_ACCESS_KEY_ID: ${{ secrets.S3_BUILD_CACHE_ACCESS_KEY_ID }}
        S3_BUILD_CACHE_SECRET_KEY: ${{ secrets.S3_BUILD_CACHE_SECRET_KEY }}
      name: Run CheckerFramework
      uses: burrunan/gradle-cache-action@v1
      with:
        arguments: --scan --no-parallel --no-daemon -PenableCheckerframework classes
        job-id: checker-jdk17
        read-only: ${{ matrix.os == 'self-hosted' }}
  matrix_prep:
    env:
      GITHUB_PR_NUMBER: ${{ github.event.number }}
      MATRIX_JOBS: 5
      RNG_SEED: ${{ github.event.inputs.matrix_rng_seed }}
    name: Matrix Preparation
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v3
      with:
        fetch-depth: 50
    - continue-on-error: true
      id: set-matrix
      run: 'node .github/workflows/matrix.js

        '
  source-distribution-check:
    name: Source distribution (JDK 17)
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v3
      with:
        fetch-depth: 50
    - continue-on-error: true
      name: Start PostgreSQL
      run: docker-compose up -d && docker-compose logs
      working-directory: docker/postgres-server
    - continue-on-error: true
      name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: zulu
        java-version: 17
    - continue-on-error: true
      env:
        S3_BUILD_CACHE_ACCESS_KEY_ID: ${{ secrets.S3_BUILD_CACHE_ACCESS_KEY_ID }}
        S3_BUILD_CACHE_SECRET_KEY: ${{ secrets.S3_BUILD_CACHE_SECRET_KEY }}
      name: Prepare source distribution
      uses: burrunan/gradle-cache-action@v1
      with:
        arguments: --scan --no-parallel --no-daemon sourceDistribution -Ppgjdbc.version=1.0
          -Prelease
        job-id: source-release-jdk17
    - continue-on-error: true
      name: Verify source distribution
      run: 'tar xzf postgresql-1.0-jdbc-src.tar.gz

        cd postgresql-1.0-jdbc-src

        mvn --batch-mode --fail-at-end --show-version verify

        '
      working-directory: pgjdbc/build/distributions
    - continue-on-error: true
      if: ${{ failure() && github.event_name == 'pull_request' }}
      name: Attach heap dump if any
      uses: actions/upload-artifact@v4
      with:
        name: pgjdbc-heapdump-source-distribution
        path: pgjdbc/build/distributions/postgresql-1.0-jdbc-src/target/surefire-reports/*.hprof
name: CI
on:
  repository_dispatch:
    types: trigger-ga___main.yml
permissions:
  contents: read
